Installation
============


Requirements
------------

You need to have the following software properly installed in order to
build the MPI module and the companion parallelized version of the
Python interpreter:

* A Python 2.3/2.4/2.5/2.6 distribution, with Python library
  preferably compiled as a dynamic library.

* A working MPI distribution for your architecture, compiled with dynamic
  libraries. For example, on a GNU/Linux box this requirement can be
  accomplished by typing:

  + *MPICH 2* ::

        $ tar -zxf mpich2-X.X.X.tar.gz
        $ cd mpich2-X.X.X
        $ ./configure --enable-sharedlibs=gcc --prefix=/usr/local/mpich2
        $ make
        $ make install

  + *Open MPI* ::

        $ tar -zxf openmpi-X.X.X tar.gz
        $ cd openmpi-X.X.X
        $ ./configure --prefix=/usr/local/openmpi
        $ make all
        $ make install

  + *LAM* ::

        $ tar -zxf lam-X.X.X.tar.gz
        $ cd lam-X.X.X
        $ ./configure --enable-shared --prefix=/usr/local/lam
        $ make
        $ make install

  + *MPICH 1* ::

        $ tar -zxf mpich-X.X.X.tar.gz
        $ cd mpich-X.X.X
        $ ./configure --enable-sharedlib --prefix=/usr/local/mpich1
        $ make
        $ make install

  .. note:: Perhaps the user will have to set his ``LD_LIBRARY_PATH``
     environmental variable (using ``export``, ``setenv`` or what
     applies to his system) pointing to the MPI library directory. In
     case of getting runtime linking error when running MPI programs,
     the following lines can be added to the user login shell script
     (``.profile``, ``.bashrc``, etc.).
      
     - *MPICH 2* ::

       $ MPI_DIR=/usr/local/mpich2
       $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_DIR/lib

     - *Open MPI* ::

       $ MPI_DIR=/usr/local/openmpi
       $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_DIR/lib

     - *LAM* ::

        $ MPI_DIR=/usr/local/lam
        $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_DIR/lib

     - *MPICH 1* ::

        $ MPI_DIR=/usr/local/mpich1
        $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_DIR/lib/shared
	$ export MPICH_USE_SHLIB=yes

  .. warning:: MPICH 1 support for dynamic libraries is not completely
     transparent. Users should set environmental variable
     ``MPICH_USE_SHLIB`` to ``yes`` in order to avoid link problems
     when using ``mpicc``.


Building
--------

After downloading and unpacking the module distribution::

   $ tar -zxf mpi4py-X.X.X.tar.gz
   $ cd mpi4py-X.X.X

the distribution is ready for building.

- If you use a MPI implementation providing a *mpicc* compiler wrapper
  (e.g., MPICH, OpenMPI, LAM), it will be used for compilation and
  linking. This is the preferred and easiest way of building MPI for
  Python.

  If ``mpicc`` is located somewhere in your search path, simply run
  the *build* command::

      $ python setup.py build

  If ``mpicc`` is not in your search path or the compiler wrapper has
  a different name, you can run the *build* command specifying its
  location::

      $ python setup.py build --mpicc=/where/you/have/mpicc

- Alternatively, you can provide all the relevant information about
  your MPI distribution by editing the file ``mpi.cfg``. You can use
  the default section ``[mpi]`` or add a new, custom section, for
  example ``[my_mpi]`` (see the examples provided in ``mpi.cfg``)::

     [mpi]

     include_dirs         = /usr/local/mpi/include
     libraries            = mpi
     library_dirs         = /usr/local/mpi/lib
     runtime_library_dirs = /usr/local/mpi/lib
        
     [my_mpi]
        
     include_dirs         = /opt/mpi/include ...
     libraries            = mpi ...
     library_dirs         = /opt/mpi/lib ...
     runtime_library_dirs = /op/mpi/lib ...
        
     ...

  and run the *build* command, perhaps specifying you custom section::

      $ python setup.py build --mpi=my_mpi


Installing
----------

After building, the distribution is ready for install.

If you have root privileges (either by login as ``root`` user of by
using ``sudo`` ) and you want to install MPI for Python in your system
for all users, just do::

   $ python setup.py install

The previous steps will install the ``mpi4py`` package at standard
location ``<prefix>/lib/python<version>/site-packages``.

If you do not have root privileges or you want to install mpi4py in
your home directory (assumed it is available through the ``$HOME``
environmental variable) , just do:

   $ python setup.py install --home=$HOME

Finally, add ``$HOME/lib/python`` or ``$HOME/lib64/python`` to your
``$PYTHONPATH`` environmental variable


Testing
-------

Issuing at the command line::

   $ mpiexec -n 5 python demo/helloworld.py

or (in the case of older MPI-1 implementations)::

   $ mpirun -np 5 python demo/helloworld.py

will launch a five-process run of the Python interpreter and run the
test scripts ``demo/helloworld.py``.


You can also run the *unittest* scripts located at
``test/unittest``::

   $ mpiexec -n 5 python test/runalltest.py
